(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var staticCacheName = 'trains-static-v3';

/*
  When the service worker is installing, it feches the resources and cache them in the current
  version of the cache.
*/
self.addEventListener('install', function (event) {
  event.waitUntil(caches.open(staticCacheName).then(function (cache) {
    return cache.addAll(['/', '/index.html', '/dist/js/main.js', '/dist/css/styles.css', 'https://fonts.googleapis.com/css?family=Baloo+Paaji|Ubuntu', '/dist/img/CaltrainZoneMap.png', '/dist/data/stops.txt', '/dist/data/stop_times.txt', '/dist/data/routes.txt', '/dist/data/trips.txt']);
  }).catch(function (error) {

    console.log(error);
  }));
});

/* 
  When the service worker activates it removes previous versions of the cache
  and this ways it will continue operating on the new version and don't leave rubbish behind.
*/
self.addEventListener('activate', function (event) {

  function isNotCurrentVersion(cacheName) {
    return cacheName != staticCacheName;
  }

  event.waitUntil(
  // Remove any old version of the cache
  caches.keys().then(function (cacheNames) {
    return Promise.all(cacheNames.filter(isNotCurrentVersion).map(function (oldVersionCacheName) {
      return caches.delete(oldVersionCacheName);
    }));
  }));
});

/*
  Intercept fetch and respond with the cached element if there is a match
*/
self.addEventListener('fetch', function (event) {

  event.respondWith(caches.match(event.request).then(function (response) {
    //if (response ) console.log('Found in cache!', event.request.url);
    return response || fetch(event.request);
  }));

  return;
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhcHAvc2VydmljZV93b3JrZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLElBQUksa0JBQWtCLGtCQUF0Qjs7QUFFQTs7OztBQUlBLEtBQUssZ0JBQUwsQ0FBc0IsU0FBdEIsRUFBaUMsVUFBUyxLQUFULEVBQWdCO0FBQy9DLFFBQU0sU0FBTixDQUNFLE9BQU8sSUFBUCxDQUFZLGVBQVosRUFBNkIsSUFBN0IsQ0FBa0MsVUFBUyxLQUFULEVBQWdCO0FBQ2hELFdBQU8sTUFBTSxNQUFOLENBQWEsQ0FDbEIsR0FEa0IsRUFFbEIsYUFGa0IsRUFHbEIsa0JBSGtCLEVBSWxCLHNCQUprQixFQUtsQiw0REFMa0IsRUFNbEIsK0JBTmtCLEVBT2xCLHNCQVBrQixFQVFsQiwyQkFSa0IsRUFTbEIsdUJBVGtCLEVBVWxCLHNCQVZrQixDQUFiLENBQVA7QUFZRCxHQWJELEVBYUcsS0FiSCxDQWFTLFVBQVMsS0FBVCxFQUFnQjs7QUFFdkIsWUFBUSxHQUFSLENBQVksS0FBWjtBQUVELEdBakJELENBREY7QUFvQkQsQ0FyQkQ7O0FBdUJBOzs7O0FBSUEsS0FBSyxnQkFBTCxDQUFzQixVQUF0QixFQUFrQyxVQUFTLEtBQVQsRUFBZ0I7O0FBRWhELFdBQVMsbUJBQVQsQ0FBNkIsU0FBN0IsRUFBd0M7QUFDdEMsV0FBTyxhQUFhLGVBQXBCO0FBQ0Q7O0FBRUQsUUFBTSxTQUFOO0FBQ0U7QUFDQSxTQUFPLElBQVAsR0FBYyxJQUFkLENBQW1CLFVBQVMsVUFBVCxFQUFxQjtBQUN0QyxXQUFPLFFBQVEsR0FBUixDQUNMLFdBQ0csTUFESCxDQUNVLG1CQURWLEVBRUcsR0FGSCxDQUVPLFVBQUMsbUJBQUQ7QUFBQSxhQUF5QixPQUFPLE1BQVAsQ0FBYyxtQkFBZCxDQUF6QjtBQUFBLEtBRlAsQ0FESyxDQUFQO0FBS0QsR0FORCxDQUZGO0FBV0QsQ0FqQkQ7O0FBbUJBOzs7QUFHQSxLQUFLLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCLFVBQVMsS0FBVCxFQUFnQjs7QUFFN0MsUUFBTSxXQUFOLENBQ0UsT0FBTyxLQUFQLENBQWEsTUFBTSxPQUFuQixFQUE0QixJQUE1QixDQUFpQyxVQUFTLFFBQVQsRUFBbUI7QUFDbEQ7QUFDQSxXQUFPLFlBQVksTUFBTSxNQUFNLE9BQVosQ0FBbkI7QUFDRCxHQUhELENBREY7O0FBT0E7QUFFRCxDQVhEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInZhciBzdGF0aWNDYWNoZU5hbWUgPSAndHJhaW5zLXN0YXRpYy12Myc7XG5cbi8qXG4gIFdoZW4gdGhlIHNlcnZpY2Ugd29ya2VyIGlzIGluc3RhbGxpbmcsIGl0IGZlY2hlcyB0aGUgcmVzb3VyY2VzIGFuZCBjYWNoZSB0aGVtIGluIHRoZSBjdXJyZW50XG4gIHZlcnNpb24gb2YgdGhlIGNhY2hlLlxuKi9cbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignaW5zdGFsbCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGV2ZW50LndhaXRVbnRpbChcbiAgICBjYWNoZXMub3BlbihzdGF0aWNDYWNoZU5hbWUpLnRoZW4oZnVuY3Rpb24oY2FjaGUpIHtcbiAgICAgIHJldHVybiBjYWNoZS5hZGRBbGwoW1xuICAgICAgICAnLycsXG4gICAgICAgICcvaW5kZXguaHRtbCcsXG4gICAgICAgICcvZGlzdC9qcy9tYWluLmpzJyxcbiAgICAgICAgJy9kaXN0L2Nzcy9zdHlsZXMuY3NzJyxcbiAgICAgICAgJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1CYWxvbytQYWFqaXxVYnVudHUnLFxuICAgICAgICAnL2Rpc3QvaW1nL0NhbHRyYWluWm9uZU1hcC5wbmcnLFxuICAgICAgICAnL2Rpc3QvZGF0YS9zdG9wcy50eHQnLFxuICAgICAgICAnL2Rpc3QvZGF0YS9zdG9wX3RpbWVzLnR4dCcsXG4gICAgICAgICcvZGlzdC9kYXRhL3JvdXRlcy50eHQnLFxuICAgICAgICAnL2Rpc3QvZGF0YS90cmlwcy50eHQnXG4gICAgICBdKTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuXG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG5cbiAgICB9KVxuICApO1xufSk7XG5cbi8qIFxuICBXaGVuIHRoZSBzZXJ2aWNlIHdvcmtlciBhY3RpdmF0ZXMgaXQgcmVtb3ZlcyBwcmV2aW91cyB2ZXJzaW9ucyBvZiB0aGUgY2FjaGVcbiAgYW5kIHRoaXMgd2F5cyBpdCB3aWxsIGNvbnRpbnVlIG9wZXJhdGluZyBvbiB0aGUgbmV3IHZlcnNpb24gYW5kIGRvbid0IGxlYXZlIHJ1YmJpc2ggYmVoaW5kLlxuKi9cbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignYWN0aXZhdGUnLCBmdW5jdGlvbihldmVudCkge1xuXG4gIGZ1bmN0aW9uIGlzTm90Q3VycmVudFZlcnNpb24oY2FjaGVOYW1lKSB7XG4gICAgcmV0dXJuIGNhY2hlTmFtZSAhPSBzdGF0aWNDYWNoZU5hbWU7XG4gIH1cblxuICBldmVudC53YWl0VW50aWwoXG4gICAgLy8gUmVtb3ZlIGFueSBvbGQgdmVyc2lvbiBvZiB0aGUgY2FjaGVcbiAgICBjYWNoZXMua2V5cygpLnRoZW4oZnVuY3Rpb24oY2FjaGVOYW1lcykge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgICBjYWNoZU5hbWVzXG4gICAgICAgICAgLmZpbHRlcihpc05vdEN1cnJlbnRWZXJzaW9uKVxuICAgICAgICAgIC5tYXAoKG9sZFZlcnNpb25DYWNoZU5hbWUpID0+IGNhY2hlcy5kZWxldGUob2xkVmVyc2lvbkNhY2hlTmFtZSkpXG4gICAgICApO1xuICAgIH0pXG4gICk7XG5cbn0pO1xuXG4vKlxuICBJbnRlcmNlcHQgZmV0Y2ggYW5kIHJlc3BvbmQgd2l0aCB0aGUgY2FjaGVkIGVsZW1lbnQgaWYgdGhlcmUgaXMgYSBtYXRjaFxuKi9cbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignZmV0Y2gnLCBmdW5jdGlvbihldmVudCkge1xuICBcbiAgZXZlbnQucmVzcG9uZFdpdGgoXG4gICAgY2FjaGVzLm1hdGNoKGV2ZW50LnJlcXVlc3QpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIC8vaWYgKHJlc3BvbnNlICkgY29uc29sZS5sb2coJ0ZvdW5kIGluIGNhY2hlIScsIGV2ZW50LnJlcXVlc3QudXJsKTtcbiAgICAgIHJldHVybiByZXNwb25zZSB8fCBmZXRjaChldmVudC5yZXF1ZXN0KTtcbiAgICB9KVxuICApO1xuXG4gIHJldHVybjtcblxufSk7XG4iXX0=
