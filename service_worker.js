(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var staticCacheName = 'trains-static-v3';

/*
  When the service worker is installing, it feches the resources and cache them in the current
  version of the cache.
*/
self.addEventListener('install', function (event) {
  event.waitUntil(caches.open(staticCacheName).then(function (cache) {
    return cache.addAll(['/', '/index.html', '/dist/js/main.js', '/dist/css/styles.css', 'https://fonts.googleapis.com/css?family=Baloo+Paaji|Ubuntu', '/dist/data/stops.txt', '/dist/data/stop_times.txt', '/dist/data/routes.txt', '/dist/data/trips.txt']);
  }).catch(function (error) {

    console.log(error);
  }));
});

/* 
  When the service worker activates it removes previous versions of the cache
  and this ways it will continue operating on the new version and don't leave rubbish behind.
*/
self.addEventListener('activate', function (event) {

  function isNotCurrentVersion(cacheName) {
    return cacheName != staticCacheName;
  }

  event.waitUntil(
  // Remove any old version of the cache
  caches.keys().then(function (cacheNames) {
    return Promise.all(cacheNames.filter(isNotCurrentVersion).map(function (oldVersionCacheName) {
      return caches.delete(oldVersionCacheName);
    }));
  }));
});

/*
  Intercept fetch and respond with the cached element if there is a match
*/
self.addEventListener('fetch', function (event) {

  event.respondWith(caches.match(event.request).then(function (response) {
    //if (response ) console.log('Found in cache!', event.request.url);
    return response || fetch(event.request);
  }));

  return;
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhcHAvc2VydmljZV93b3JrZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLElBQUksa0JBQWtCLGtCQUF0Qjs7QUFFQTs7OztBQUlBLEtBQUssZ0JBQUwsQ0FBc0IsU0FBdEIsRUFBaUMsVUFBUyxLQUFULEVBQWdCO0FBQy9DLFFBQU0sU0FBTixDQUNFLE9BQU8sSUFBUCxDQUFZLGVBQVosRUFBNkIsSUFBN0IsQ0FBa0MsVUFBUyxLQUFULEVBQWdCO0FBQ2hELFdBQU8sTUFBTSxNQUFOLENBQWEsQ0FDbEIsR0FEa0IsRUFFbEIsYUFGa0IsRUFHbEIsa0JBSGtCLEVBSWxCLHNCQUprQixFQUtsQiw0REFMa0IsRUFNbEIsc0JBTmtCLEVBT2xCLDJCQVBrQixFQVFsQix1QkFSa0IsRUFTbEIsc0JBVGtCLENBQWIsQ0FBUDtBQVdELEdBWkQsRUFZRyxLQVpILENBWVMsVUFBUyxLQUFULEVBQWdCOztBQUV2QixZQUFRLEdBQVIsQ0FBWSxLQUFaO0FBRUQsR0FoQkQsQ0FERjtBQW1CRCxDQXBCRDs7QUFzQkE7Ozs7QUFJQSxLQUFLLGdCQUFMLENBQXNCLFVBQXRCLEVBQWtDLFVBQVMsS0FBVCxFQUFnQjs7QUFFaEQsV0FBUyxtQkFBVCxDQUE2QixTQUE3QixFQUF3QztBQUN0QyxXQUFPLGFBQWEsZUFBcEI7QUFDRDs7QUFFRCxRQUFNLFNBQU47QUFDRTtBQUNBLFNBQU8sSUFBUCxHQUFjLElBQWQsQ0FBbUIsVUFBUyxVQUFULEVBQXFCO0FBQ3RDLFdBQU8sUUFBUSxHQUFSLENBQ0wsV0FDRyxNQURILENBQ1UsbUJBRFYsRUFFRyxHQUZILENBRU8sVUFBQyxtQkFBRDtBQUFBLGFBQXlCLE9BQU8sTUFBUCxDQUFjLG1CQUFkLENBQXpCO0FBQUEsS0FGUCxDQURLLENBQVA7QUFLRCxHQU5ELENBRkY7QUFXRCxDQWpCRDs7QUFtQkE7OztBQUdBLEtBQUssZ0JBQUwsQ0FBc0IsT0FBdEIsRUFBK0IsVUFBUyxLQUFULEVBQWdCOztBQUU3QyxRQUFNLFdBQU4sQ0FDRSxPQUFPLEtBQVAsQ0FBYSxNQUFNLE9BQW5CLEVBQTRCLElBQTVCLENBQWlDLFVBQVMsUUFBVCxFQUFtQjtBQUNsRDtBQUNBLFdBQU8sWUFBWSxNQUFNLE1BQU0sT0FBWixDQUFuQjtBQUNELEdBSEQsQ0FERjs7QUFPQTtBQUVELENBWEQiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwidmFyIHN0YXRpY0NhY2hlTmFtZSA9ICd0cmFpbnMtc3RhdGljLXYzJztcblxuLypcbiAgV2hlbiB0aGUgc2VydmljZSB3b3JrZXIgaXMgaW5zdGFsbGluZywgaXQgZmVjaGVzIHRoZSByZXNvdXJjZXMgYW5kIGNhY2hlIHRoZW0gaW4gdGhlIGN1cnJlbnRcbiAgdmVyc2lvbiBvZiB0aGUgY2FjaGUuXG4qL1xuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdpbnN0YWxsJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgZXZlbnQud2FpdFVudGlsKFxuICAgIGNhY2hlcy5vcGVuKHN0YXRpY0NhY2hlTmFtZSkudGhlbihmdW5jdGlvbihjYWNoZSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmFkZEFsbChbXG4gICAgICAgICcvJyxcbiAgICAgICAgJy9pbmRleC5odG1sJyxcbiAgICAgICAgJy9kaXN0L2pzL21haW4uanMnLFxuICAgICAgICAnL2Rpc3QvY3NzL3N0eWxlcy5jc3MnLFxuICAgICAgICAnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUJhbG9vK1BhYWppfFVidW50dScsXG4gICAgICAgICcvZGlzdC9kYXRhL3N0b3BzLnR4dCcsXG4gICAgICAgICcvZGlzdC9kYXRhL3N0b3BfdGltZXMudHh0JyxcbiAgICAgICAgJy9kaXN0L2RhdGEvcm91dGVzLnR4dCcsXG4gICAgICAgICcvZGlzdC9kYXRhL3RyaXBzLnR4dCdcbiAgICAgIF0pO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG5cbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcblxuICAgIH0pXG4gICk7XG59KTtcblxuLyogXG4gIFdoZW4gdGhlIHNlcnZpY2Ugd29ya2VyIGFjdGl2YXRlcyBpdCByZW1vdmVzIHByZXZpb3VzIHZlcnNpb25zIG9mIHRoZSBjYWNoZVxuICBhbmQgdGhpcyB3YXlzIGl0IHdpbGwgY29udGludWUgb3BlcmF0aW5nIG9uIHRoZSBuZXcgdmVyc2lvbiBhbmQgZG9uJ3QgbGVhdmUgcnViYmlzaCBiZWhpbmQuXG4qL1xuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdhY3RpdmF0ZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgZnVuY3Rpb24gaXNOb3RDdXJyZW50VmVyc2lvbihjYWNoZU5hbWUpIHtcbiAgICByZXR1cm4gY2FjaGVOYW1lICE9IHN0YXRpY0NhY2hlTmFtZTtcbiAgfVxuXG4gIGV2ZW50LndhaXRVbnRpbChcbiAgICAvLyBSZW1vdmUgYW55IG9sZCB2ZXJzaW9uIG9mIHRoZSBjYWNoZVxuICAgIGNhY2hlcy5rZXlzKCkudGhlbihmdW5jdGlvbihjYWNoZU5hbWVzKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgIGNhY2hlTmFtZXNcbiAgICAgICAgICAuZmlsdGVyKGlzTm90Q3VycmVudFZlcnNpb24pXG4gICAgICAgICAgLm1hcCgob2xkVmVyc2lvbkNhY2hlTmFtZSkgPT4gY2FjaGVzLmRlbGV0ZShvbGRWZXJzaW9uQ2FjaGVOYW1lKSlcbiAgICAgICk7XG4gICAgfSlcbiAgKTtcblxufSk7XG5cbi8qXG4gIEludGVyY2VwdCBmZXRjaCBhbmQgcmVzcG9uZCB3aXRoIHRoZSBjYWNoZWQgZWxlbWVudCBpZiB0aGVyZSBpcyBhIG1hdGNoXG4qL1xuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdmZXRjaCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gIFxuICBldmVudC5yZXNwb25kV2l0aChcbiAgICBjYWNoZXMubWF0Y2goZXZlbnQucmVxdWVzdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgLy9pZiAocmVzcG9uc2UgKSBjb25zb2xlLmxvZygnRm91bmQgaW4gY2FjaGUhJywgZXZlbnQucmVxdWVzdC51cmwpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlIHx8IGZldGNoKGV2ZW50LnJlcXVlc3QpO1xuICAgIH0pXG4gICk7XG5cbiAgcmV0dXJuO1xuXG59KTtcbiJdfQ==
